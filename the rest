import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.sql.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


loginBtn.addActionListener(this::loginBtnActionPerformed);
// Similar for all buttons
((CardLayout)cardPanel.getLayout()).show(cardPanel, "login");

private void loginBtnActionPerformed(ActionEvent evt) {
    String username = usernameField.getText().trim();
    String password = new String(passwordField.getPassword()).trim();
    Connection conn = DBConnection.getConnection();
    if (conn != null) {
        try (PreparedStatement pstmt = conn.prepareStatement("SELECT id, role FROM customers WHERE username = ? AND password = ?")) {
            pstmt.setString(1, username);
            pstmt.setString(2, password);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                long userId = rs.getLong("id");
                String role = rs.getString("role");
                JOptionPane.showMessageDialog(this, "Login successful!");
                // Store userId/role in class fields (add private long currentUserId; private String currentRole;)
                currentUserId = userId;
                currentRole = role;
                CardLayout cl = (CardLayout) cardPanel.getLayout();
                cl.show(cardPanel, role.equals("ADMIN") ? "adminDashboard" : "customerDashboard");
            } else {
                JOptionPane.showMessageDialog(this, "Invalid credentials!");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try { conn.close(); } catch (Exception ignored) {}
        }
    }
}


private void searchCarsBtnActionPerformed(ActionEvent evt) {
    String type = (String) typeCombo.getSelectedItem();
    String location = locationField.getText().trim();
    boolean availableOnly = availableCheck.isSelected();
    StringBuilder query = new StringBuilder("SELECT * FROM cars WHERE 1=1");
    if (!type.isEmpty()) query.append(" AND car_type = ?");
    if (!location.isEmpty()) query.append(" AND location ILIKE ?");
    if (availableOnly) query.append(" AND availability = TRUE");
    Connection conn = DBConnection.getConnection();
    try (PreparedStatement pstmt = conn.prepareStatement(query.toString())) {
        int paramIndex = 1;
        if (!type.isEmpty()) pstmt.setString(paramIndex++, type);
        if (!location.isEmpty()) pstmt.setString(paramIndex++, "%" + location + "%");
        ResultSet rs = pstmt.executeQuery();
        DefaultTableModel model = (DefaultTableModel) carsTable.getModel();
        model.setRowCount(0); // Clear table
        while (rs.next()) {
            model.addRow(new Object[]{rs.getLong("id"), rs.getString("make"), rs.getString("model"), rs.getInt("year"), rs.getString("car_type"), rs.getString("location"), rs.getDouble("price_per_day"), rs.getBoolean("availability")});
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    } finally {
        try { conn.close(); } catch (Exception ignored) {}
    }
}
